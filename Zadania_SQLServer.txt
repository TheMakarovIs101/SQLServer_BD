-- Задание 3
-- Вывести списки групп по заданному направлению с указание номера группы в формате ФИО, бюджет/внебюджет. Студентов выводить в алфавитном порядке.

SELECT Student.FIO AS [Full name],
       Groups.group_name AS [Group name],
       CASE WHEN Student.budjet = 1 THEN 'True' ELSE 'False' END AS budjet
FROM Student
JOIN Groups ON Groups.id = Student.group_id
ORDER BY Student.FIO


-- Вывести студентов с фамилией, начинающейся с первой буквы вашей фамилии, с указанием ФИО, номера группы и направления обучения.

SELECT Student.FIO AS [Full name],
       Groups.group_name AS [Group name],
       directions_of_study.direction_name AS [direction name]
FROM Student
JOIN Groups ON Groups.id = Student.group_id
JOIN directions_of_study ON directions_of_study.id = Groups.direction_id
WHERE Student.FIO LIKE 'K%';


-- Вывести список студентов для поздравления по месяцам в формате Фамилия И.О., день и название месяца рождения, номером группы и направлением обучения.

SELECT 
    	Student.FIO AS [FIO], 
    	DAY(Student.dob) AS [Day], 
    	DATENAME(MONTH, Student.dob) AS [Month], 
    	Groups.group_name AS [Group], 
    	directions_of_study.direction_name AS [Direction name]
FROM Student
	JOIN Groups ON Student.group_id = Groups.id
	JOIN directions_of_study ON Groups.direction_id = directions_of_study.id
ORDER BY MONTH(Student.dob), DAY(Student.dob);


-- Вывести студентов с указанием возраста в годах.

SELECT FIO, DATEDIFF(YEAR, dob, GETDATE()) AS Age
FROM Student;

-- Вывести студентов, у которых день рождения в текущем месяце.

SELECT FIO AS [Name], dob AS [Birthday]
FROM Student
WHERE MONTH(Student.dob) = MONTH(GETDATE());

-- Вывести количество студентов по каждому направлению.

SELECT COUNT(Student.id) AS [Students number], directions_of_study.direction_name AS [direction name]
FROM Student
JOIN Groups ON Groups.id = Student.group_id
JOIN directions_of_study ON directions_of_study.id = Groups.direction_id
GROUP BY directions_of_study.direction_name;


-- Вывести количество бюджетных и внебюджетных мест по группам. Для каждой группы вывести номер и название направления.

SELECT 

    Groups.group_name AS [Group],
    directions_of_study.direction_name AS [Direction name],
    SUM(CASE WHEN Student.budjet = 1 THEN 1 ELSE 0 END) AS [Budget place],
    SUM(CASE WHEN Student.budjet = 0 THEN 1 ELSE 0 END) AS [NonBudget place]
FROM 
    Student
JOIN 
    Groups ON Groups.id = Student.group_id
JOIN 
    directions_of_study ON directions_of_study.id = Groups.direction_id
GROUP BY 
    Groups.id, Groups.group_name, directions_of_study.direction_name;



-- Задание 5
-- Вывести списки групп по каждому предмету с указанием преподавателя.

SELECT course.name, Groups.group_name, Teachers.name
FROM course
JOIN directioncourseTeacher ON directioncourseTeacher.course_id = course.id
JOIN directions_of_study ON directions_of_study.id = directioncourseTeacher.direction_id
JOIN Groups ON Groups.direction_id = directions_of_study.id
JOIN Teachers ON Teachers.id = directioncourseTeacher.teacher_id;

-- Определить, какую дисциплину изучает максимальное количество студентов.

SELECT course.name AS [disc_name], COUNT(Student.FIO) AS [s_num]
FROM course
JOIN directioncourseTeacher ON directioncourseTeacher.course_id = course.id
JOIN Marks ON Marks.sub_cour_teach_id = directioncourseTeacher.id
JOIN Student ON Marks.student_id = Student.id
GROUP BY course.name
ORDER BY COUNT(Student.FIO) DESC 
OFFSET 0 ROWS FETCH FIRST 1 ROWS ONLY;

-- Определить сколько студентов обучатся у каждого из преподавателей.

SELECT Teachers.name, COUNT(Student.id) AS [s_num]
FROM Teachers
JOIN directioncourseTeacher ON directioncourseTeacher.teacher_id = Teachers.id
JOIN Marks ON Marks.sub_cour_teach_id = directioncourseTeacher.id
JOIN Student ON Student.id = Marks.student_id
GROUP BY Teachers.name;

-- Определить долю сдавших студентов по каждой дисциплине (не оценки или 2 считать не сдавшими).

SELECT course.name AS [disc_name], COUNT(CASE WHEN Marks.mark > 2 THEN 1 END) AS [s_num]
FROM course
JOIN directioncourseTeacher ON directioncourseTeacher.course_id = course.id
JOIN Marks ON Marks.sub_cour_teach_id = directioncourseTeacher.id
JOIN Student ON Marks.student_id = Student.id
GROUP BY course.name
ORDER BY COUNT(Student.FIO) DESC;

-- Определить среднюю оценку по предметам (для сдавших студентов).

SELECT course.name AS [disc_name], AVG(CASE WHEN Marks.mark > 2 THEN Marks.mark END) AS [s_avg]
FROM course
JOIN directioncourseTeacher ON directioncourseTeacher.course_id = course.id
JOIN Marks ON Marks.sub_cour_teach_id = directioncourseTeacher.id
JOIN Student ON Marks.student_id = Student.id
GROUP BY course.name
ORDER BY COUNT(Student.FIO) DESC;

-- Определить группу с максимальной средней оценкой (включая не сдавших).

SELECT Groups.group_name, AVG(Marks.mark) AS [average_mark]
FROM Groups
JOIN directions_of_study ON directions_of_study.id = Groups.direction_id
JOIN directioncourseTeacher ON directioncourseTeacher.direction_id = directions_of_study.id
JOIN Marks ON Marks.sub_cour_teach_id = directioncourseTeacher.id
GROUP BY Groups.group_name
ORDER BY AVG(Marks.mark) DESC
OFFSET 0 ROWS FETCH FIRST 1 ROWS ONLY;

-- Вывести студентов со всеми оценками отлично и не имеющих несданный экзамен.

SELECT Student.FIO, AVG(Marks.mark)
FROM Student
JOIN Marks ON Marks.student_id = Student.id
GROUP BY Student.FIO
HAVING AVG(Marks.mark) = 5.0;

-- Вывести кандидатов на отчисление (не сдан не менее двух предметов)

SELECT Student.FIO
FROM Student
JOIN Marks ON Marks.student_id = Student.id
WHERE Marks.mark = 2
GROUP BY Student.FIO
HAVING COUNT(*) >= 2;

-- Задание 7

-- Вывести по заданному предмету количество посещенных занятий.

SELECT COUNT(visiting.id) as num_presence
FROM course
JOIN directioncourseTeacher ON directioncourseTeacher.course_id = course.id
JOIN Lessons_timing ON Lessons_timing.sub_cour_teach_id = directioncourseTeacher.id
JOIN visiting ON visiting.tiiming_id = Lessons_timing.id
WHERE course.name = 'Combinatorics' AND visiting.presense = 1;

-- Вывести по заданному предмету количество пропущенных занятий.

SELECT COUNT(visiting.id) as num_absence
FROM course
JOIN directioncourseTeacher ON directioncourseTeacher.course_id = course.id
JOIN Lessons_timing ON Lessons_timing.sub_cour_teach_id = directioncourseTeacher.id
JOIN visiting ON visiting.tiiming_id = Lessons_timing.id
WHERE course.name = 'Combinatorics' AND visiting.presense = 0;

-- Вывести по заданному преподавателю количество студентов на каждом занятии.

SELECT COUNT(visiting.id) as num_students, Lessons_timing.sub_cour_teach_id
FROM Teachers
JOIN directioncourseTeacher ON directioncourseTeacher.teacher_id = Teachers.id
JOIN Lessons_timing ON Lessons_timing.sub_cour_teach_id = directioncourseTeacher.id
JOIN visiting ON visiting.tiiming_id = Lessons_timing.id
WHERE Teachers.name = 'Kovrigin Alexey Victorovich' AND visiting.presense = 1
GROUP BY Lessons_timing.sub_cour_teach_id;

-- Для каждого студента вывести общее время, потраченное на изучение каждого предмета.

SELECT
    Student.id AS student_id, Student.FIO AS student_name, directions_of_study.direction_name AS direction_name, course.name AS course_name, 
    SUM(DATEDIFF(SECOND, Time_to_Pair.time_start, Time_to_Pair.time_end)) AS total_study_time
FROM Student
JOIN Groups ON Student.group_id = Groups.id
JOIN directions_of_study ON Groups.direction_id = directions_of_study.id
JOIN directioncourseTeacher ON directions_of_study.id = directioncourseTeacher.direction_id
JOIN course ON directioncourseTeacher.course_id = course.id
JOIN Lessons_timing ON directioncourseTeacher.id = Lessons_timing.sub_cour_teach_id
JOIN Time_to_Pair ON Lessons_timing.time_id = Time_to_Pair.id
JOIN visiting ON Lessons_timing.id = visiting.tiiming_id AND Student.id = visiting.student_id AND visiting.presense = 1
GROUP BY Student.id, Student.FIO, directions_of_study.direction_name, course.name;